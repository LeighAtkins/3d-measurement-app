{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///root/3d-measurement-app/packages/3d-tools/src/components/ModelViewer.tsx"],"sourcesContent":["import React, { Suspense, useRef, useState, useEffect } from 'react';\nimport { Canvas, ThreeElements, ThreeEvent, useFrame, useThree } from '@react-three/fiber';\nimport { OrbitControls, useGLTF, Html, Center, Line, Text } from '@react-three/drei';\nimport * as THREE from 'three';\n\ninterface ModelViewerProps {\n  modelUrl?: string;\n  onPointClick?: (point: THREE.Vector3) => void;\n  measurements?: MeasurementPoint[];\n  className?: string;\n  showDimensions?: boolean;\n}\n\ninterface MeasurementPoint {\n  id: string;\n  start: THREE.Vector3;\n  end: THREE.Vector3;\n  label: string;\n  value?: number;\n  unit?: string;\n}\n\nfunction Model({ url, onPointClick, showDimensions = true }: { \n  url: string; \n  onPointClick?: (point: THREE.Vector3) => void;\n  showDimensions?: boolean;\n}) {\n  const { scene } = useGLTF(url);\n  const meshRef = useRef<THREE.Group>(null);\n\n  const handleClick = (event: ThreeEvent<MouseEvent>) => {\n    if (onPointClick && event.intersections && event.intersections[0]) {\n      const point = event.intersections[0].point;\n      onPointClick(point);\n    }\n  };\n\n  return (\n    <group>\n      <primitive \n        ref={meshRef}\n        object={scene} \n        onClick={handleClick}\n        scale={1}\n      />\n      {showDimensions && <IkeaStyleDimensions object={scene} />}\n    </group>\n  );\n}\n\nfunction FallbackModel({ onPointClick, showDimensions = true }: { \n  onPointClick?: (point: THREE.Vector3) => void;\n  showDimensions?: boolean;\n}) {\n  const meshRef = useRef<THREE.Mesh>(null);\n  const groupRef = useRef<THREE.Group>(null);\n\n  const handleClick = (event: ThreeEvent<MouseEvent>) => {\n    if (onPointClick && event.intersections && event.intersections[0]) {\n      const point = event.intersections[0].point;\n      onPointClick(point);\n    }\n  };\n\n  return (\n    <group ref={groupRef}>\n      <mesh ref={meshRef} onClick={handleClick}>\n        <boxGeometry args={[1, 1, 1]} />\n        <meshStandardMaterial color=\"#10b981\" transparent opacity={0.8} />\n      </mesh>\n      {showDimensions && groupRef.current && <IkeaStyleDimensions object={groupRef.current} />}\n    </group>\n  );\n}\n\nfunction ExteriorDimensionLine({ start, end, label, value, unit, axis }: { \n  start: THREE.Vector3; \n  end: THREE.Vector3; \n  label: string;\n  value?: number;\n  unit?: string;\n  axis: 'x' | 'y' | 'z';\n}) {\n  const lineRef = useRef<THREE.Group>(null);\n  const direction = new THREE.Vector3().subVectors(end, start).normalize();\n  const distance = start.distanceTo(end);\n  const midPoint = new THREE.Vector3().addVectors(start, end).multiplyScalar(0.5);\n  \n  // Calculate offset for dimension line based on axis\n  let offset = new THREE.Vector3();\n  if (axis === 'x') {\n    offset = new THREE.Vector3(0, -0.05, 0); // Offset below for width\n  } else if (axis === 'y') {\n    offset = new THREE.Vector3(-0.05, 0, 0); // Offset left for height\n  } else if (axis === 'z') {\n    offset = new THREE.Vector3(0, -0.05, 0); // Offset below for depth\n  }\n  \n  const offsetStart = new THREE.Vector3().addVectors(start, offset);\n  const offsetEnd = new THREE.Vector3().addVectors(end, offset);\n  const offsetMid = new THREE.Vector3().addVectors(midPoint, offset);\n\n  const displayValue = value ? `${value} ${unit || 'cm'}` : `${distance.toFixed(1)} units`;\n\n  return (\n    <group ref={lineRef}>\n      {/* Dimension line */}\n      <Line\n        points={[offsetStart, offsetEnd]}\n        color=\"#ef4444\"\n        lineWidth={2}\n      />\n      \n      {/* Extension lines */}\n      <Line\n        points={[start, offsetStart]}\n        color=\"#ef4444\"\n        lineWidth={1}\n      />\n      <Line\n        points={[end, offsetEnd]}\n        color=\"#ef4444\"\n        lineWidth={1}\n      />\n      \n      {/* End point markers */}\n      <mesh position={offsetStart}>\n        <sphereGeometry args={[0.01]} />\n        <meshBasicMaterial color=\"#ef4444\" />\n      </mesh>\n      <mesh position={offsetEnd}>\n        <sphereGeometry args={[0.01]} />\n        <meshBasicMaterial color=\"#ef4444\" />\n      </mesh>\n      \n      {/* Dimension text */}\n      <Html\n        position={offsetMid}\n        center\n        transform={false}\n        sprite={true}\n        style={{\n          pointerEvents: 'none',\n        }}\n      >\n        <div className=\"bg-white px-1 py-0.5 rounded shadow border border-gray-300\" style={{\n          fontSize: '10px',\n          lineHeight: '1.3',\n          minWidth: 'max-content',\n          whiteSpace: 'nowrap',\n          transform: 'scale(0.65)',\n          transformOrigin: 'center'\n        }}>\n          <div className=\"font-medium text-gray-800\" style={{ margin: '0', padding: '0' }}>{label}</div>\n          <div className=\"text-red-600\" style={{ margin: '0', padding: '0' }}>{displayValue}</div>\n        </div>\n      </Html>\n      \n      {/* Arrow markers at ends */}\n      <mesh position={offsetStart} rotation={[0, 0, Math.atan2(direction.y, direction.x)]}>\n        <coneGeometry args={[0.01, 0.03, 4]} />\n        <meshBasicMaterial color=\"#ef4444\" />\n      </mesh>\n      <mesh position={offsetEnd} rotation={[0, 0, Math.atan2(-direction.y, -direction.x)]}>\n        <coneGeometry args={[0.01, 0.03, 4]} />\n        <meshBasicMaterial color=\"#ef4444\" />\n      </mesh>\n    </group>\n  );\n}\n\nfunction DimensionLine({ start, end, label, value, unit }: { \n  start: THREE.Vector3; \n  end: THREE.Vector3; \n  label: string;\n  value?: number;\n  unit?: string;\n}) {\n  const lineRef = useRef<THREE.Group>(null);\n  const direction = new THREE.Vector3().subVectors(end, start).normalize();\n  const distance = start.distanceTo(end);\n  const midPoint = new THREE.Vector3().addVectors(start, end).multiplyScalar(0.5);\n  \n  // Calculate offset for dimension line (perpendicular to the measurement)\n  const offset = new THREE.Vector3(0, 0.08, 0);\n  const offsetStart = new THREE.Vector3().addVectors(start, offset);\n  const offsetEnd = new THREE.Vector3().addVectors(end, offset);\n  const offsetMid = new THREE.Vector3().addVectors(midPoint, offset);\n\n  const displayValue = value ? `${value} ${unit || 'cm'}` : `${distance.toFixed(1)} units`;\n\n  return (\n    <group ref={lineRef}>\n      {/* Main measurement line */}\n      <Line\n        points={[start, end]}\n        color=\"#2563eb\"\n        lineWidth={3}\n      />\n      \n      {/* Dimension line above */}\n      <Line\n        points={[offsetStart, offsetEnd]}\n        color=\"#dc2626\"\n        lineWidth={2}\n      />\n      \n      {/* Extension lines */}\n      <Line\n        points={[start, offsetStart]}\n        color=\"#dc2626\"\n        lineWidth={1}\n      />\n      <Line\n        points={[end, offsetEnd]}\n        color=\"#dc2626\"\n        lineWidth={1}\n      />\n      \n      {/* Start point marker */}\n      <mesh position={start}>\n        <sphereGeometry args={[0.015]} />\n        <meshBasicMaterial color=\"#2563eb\" />\n      </mesh>\n      \n      {/* End point marker */}\n      <mesh position={end}>\n        <sphereGeometry args={[0.015]} />\n        <meshBasicMaterial color=\"#2563eb\" />\n      </mesh>\n      \n      {/* Dimension text */}\n      <Html\n        position={offsetMid}\n        center\n        transform={false}\n        sprite={true}\n        style={{\n          pointerEvents: 'none',\n        }}\n      >\n        <div className=\"bg-white px-1 py-0.5 rounded shadow border border-gray-300\" style={{\n          fontSize: '10px',\n          lineHeight: '1.3',\n          minWidth: 'max-content',\n          whiteSpace: 'nowrap',\n          transform: 'scale(0.7)',\n          transformOrigin: 'center'\n        }}>\n          <div className=\"font-medium text-gray-800\" style={{ margin: '0', padding: '0' }}>{label}</div>\n          <div className=\"text-blue-600\" style={{ margin: '0', padding: '0' }}>{displayValue}</div>\n        </div>\n      </Html>\n      \n      {/* Arrow markers at ends */}\n      <mesh position={offsetStart} rotation={[0, 0, Math.atan2(direction.y, direction.x)]}>\n        <coneGeometry args={[0.015, 0.04, 4]} />\n        <meshBasicMaterial color=\"#dc2626\" />\n      </mesh>\n      <mesh position={offsetEnd} rotation={[0, 0, Math.atan2(-direction.y, -direction.x)]}>\n        <coneGeometry args={[0.015, 0.04, 4]} />\n        <meshBasicMaterial color=\"#dc2626\" />\n      </mesh>\n    </group>\n  );\n}\n\nfunction IkeaStyleDimensions({ object }: { object: THREE.Object3D }) {\n  const { camera } = useThree();\n  const [bbox, setBbox] = useState<THREE.Box3 | null>(null);\n  const [cameraPosition, setCameraPosition] = useState(new THREE.Vector3());\n  \n  useFrame(() => {\n    setCameraPosition(camera.position.clone());\n  });\n  \n  useEffect(() => {\n    if (object) {\n      const box = new THREE.Box3().setFromObject(object);\n      setBbox(box);\n    }\n  }, [object]);\n\n  if (!bbox) return null;\n\n  const min = bbox.min;\n  const max = bbox.max;\n  const center = new THREE.Vector3().addVectors(min, max).multiplyScalar(0.5);\n  const size = new THREE.Vector3().subVectors(max, min);\n  \n  // Calculate camera direction relative to object center\n  const cameraDir = new THREE.Vector3().subVectors(cameraPosition, center).normalize();\n  \n  // Surface edge points - actual cube edges\n  const frontBottomLeft = new THREE.Vector3(min.x, min.y, min.z);\n  const frontBottomRight = new THREE.Vector3(max.x, min.y, min.z);\n  const frontTopLeft = new THREE.Vector3(min.x, max.y, min.z);\n  const frontTopRight = new THREE.Vector3(max.x, max.y, min.z);\n  const backBottomLeft = new THREE.Vector3(min.x, min.y, max.z);\n  const backBottomRight = new THREE.Vector3(max.x, min.y, max.z);\n  const backTopLeft = new THREE.Vector3(min.x, max.y, max.z);\n  const backTopRight = new THREE.Vector3(max.x, max.y, max.z);\n\n  // Choose edges based on camera position (front-facing bias)\n  const useTopEdge = cameraPosition.y > center.y;     // Camera is above center\n  const useRightEdge = cameraPosition.x > center.x;   // Camera is to the right of center\n  const useFrontZ = cameraPosition.z > center.z;      // Camera is in front\n  \n\n  // Define the outer prism edges (closer to cube - 50% of original distance)\n  const gap = 0.075; // Distance from cube surface to dimension line (reduced by 50%)\n  const outerMin = new THREE.Vector3(min.x - gap, min.y - gap, min.z - gap);\n  const outerMax = new THREE.Vector3(max.x + gap, max.y + gap, max.z + gap);\n\n  return (\n    <group>\n      {/* WIDTH MEASUREMENT - Use closest Y edge to camera */}\n      <SurfaceDimensionLine\n        startSurface={new THREE.Vector3(\n          outerMin.x + gap, \n          useTopEdge ? outerMax.y : outerMin.y, \n          useFrontZ ? outerMin.z : outerMax.z\n        )}\n        endSurface={new THREE.Vector3(\n          outerMax.x - gap, \n          useTopEdge ? outerMax.y : outerMin.y, \n          useFrontZ ? outerMin.z : outerMax.z\n        )}\n        label=\"Width\"\n        value={parseFloat(size.x.toFixed(1))}\n        unit=\"units\"\n        side=\"front\"\n      />\n      \n      {/* HEIGHT MEASUREMENT - Switch left/right based on camera X */}\n      <SurfaceDimensionLine\n        startSurface={new THREE.Vector3(\n          useRightEdge ? outerMax.x : outerMin.x, \n          outerMin.y + gap, \n          useFrontZ ? outerMin.z : outerMax.z\n        )}\n        endSurface={new THREE.Vector3(\n          useRightEdge ? outerMax.x : outerMin.x, \n          outerMax.y - gap, \n          useFrontZ ? outerMin.z : outerMax.z\n        )}\n        label=\"Height\"\n        value={parseFloat(size.y.toFixed(1))}\n        unit=\"units\"\n        side={useRightEdge ? \"right\" : \"left\"}\n      />\n      \n      {/* DEPTH MEASUREMENT - Use closest X edge to camera */}\n      <SurfaceDimensionLine\n        startSurface={new THREE.Vector3(\n          useRightEdge ? outerMax.x : outerMin.x, \n          useTopEdge ? outerMax.y : outerMin.y, \n          outerMin.z + gap\n        )}\n        endSurface={new THREE.Vector3(\n          useRightEdge ? outerMax.x : outerMin.x, \n          useTopEdge ? outerMax.y : outerMin.y, \n          outerMax.z - gap\n        )}\n        label=\"Depth\"\n        value={parseFloat(size.z.toFixed(1))}\n        unit=\"units\"\n        side={useTopEdge ? \"top\" : \"bottom\"}\n      />\n    </group>\n  );\n}\n\nfunction SurfaceDimensionLine({ \n  startSurface, \n  endSurface, \n  label, \n  value, \n  unit, \n  side \n}: { \n  startSurface: THREE.Vector3; \n  endSurface: THREE.Vector3; \n  label: string;\n  value?: number;\n  unit?: string;\n  side: 'front' | 'back' | 'left' | 'right' | 'top' | 'bottom';\n}) {\n  const lineRef = useRef<THREE.Group>(null);\n  const direction = new THREE.Vector3().subVectors(endSurface, startSurface).normalize();\n  const distance = startSurface.distanceTo(endSurface);\n  const midPoint = new THREE.Vector3().addVectors(startSurface, endSurface).multiplyScalar(0.5);\n\n  const displayValue = value ? `${value} ${unit || 'units'}` : `${distance.toFixed(1)} units`;\n\n  // Calculate proper rotation for arrow heads to align with line direction\n  const arrowLength = 0.03;\n  \n  // Create quaternions for proper arrow rotation based on line direction\n  const upVector = new THREE.Vector3(0, 1, 0); // Default cone points up\n  const quaternion1 = new THREE.Quaternion().setFromUnitVectors(upVector, direction.clone().multiplyScalar(-1)); // Point outward from start\n  const quaternion2 = new THREE.Quaternion().setFromUnitVectors(upVector, direction.clone()); // Point outward from end\n\n  return (\n    <group ref={lineRef}>\n      {/* Main dimension line */}\n      <Line\n        points={[startSurface, endSurface]}\n        color=\"#ef4444\"\n        lineWidth={2}\n      />\n      \n      {/* Arrow heads with proper rotation based on line direction */}\n      <mesh position={startSurface} quaternion={quaternion1}>\n        <coneGeometry args={[0.01, 0.025, 6]} />\n        <meshBasicMaterial color=\"#ef4444\" />\n      </mesh>\n      <mesh position={endSurface} quaternion={quaternion2}>\n        <coneGeometry args={[0.01, 0.025, 6]} />\n        <meshBasicMaterial color=\"#ef4444\" />\n      </mesh>\n      \n      \n      {/* Dimension text */}\n      <Html\n        position={midPoint}\n        center\n        transform={false}\n        sprite={true}\n        style={{\n          pointerEvents: 'none',\n        }}\n      >\n        <div className=\"bg-white px-2 py-1 rounded shadow border border-gray-300\" style={{\n          fontSize: '11px',\n          lineHeight: '1.3',\n          minWidth: 'max-content',\n          whiteSpace: 'nowrap',\n          transform: 'scale(0.75)',\n          transformOrigin: 'center'\n        }}>\n          <div className=\"font-semibold text-gray-800\" style={{ margin: '0', padding: '0' }}>{label}</div>\n          <div className=\"text-red-600\" style={{ margin: '0', padding: '0' }}>{displayValue}</div>\n        </div>\n      </Html>\n    </group>\n  );\n}\n\nfunction MeasurementVisualization({ measurements }: { measurements: MeasurementPoint[] }) {\n  // No longer render internal measurement lines - only show IKEA-style external dimensions\n  return null;\n}\n\nfunction LoadingFallback() {\n  return (\n    <Html center>\n      <div className=\"bg-white px-4 py-2 rounded shadow\">\n        <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n        <p className=\"text-sm text-gray-600\">Loading 3D model...</p>\n      </div>\n    </Html>\n  );\n}\n\nfunction ErrorFallback({ error }: { error: string }) {\n  return (\n    <Html center>\n      <div className=\"bg-red-50 border border-red-200 px-4 py-2 rounded shadow\">\n        <p className=\"text-sm text-red-800\">Failed to load 3D model</p>\n        <p className=\"text-xs text-red-600\">{error}</p>\n      </div>\n    </Html>\n  );\n}\n\nexport const ModelViewer: React.FC<ModelViewerProps> = ({\n  modelUrl,\n  onPointClick,\n  measurements = [],\n  className = '',\n  showDimensions = true\n}) => {\n  const [error, setError] = useState<string>('');\n\n  return (\n    <div className={`w-full h-96 bg-gray-100 rounded-lg overflow-hidden ${className}`}>\n      <Canvas\n        camera={{ position: [2.5, 2.5, 2.5], fov: 50 }}\n        style={{ background: '#f8fafc' }}\n      >\n        {/* Lighting */}\n        <ambientLight intensity={0.5} />\n        <directionalLight\n          position={[10, 10, 5]}\n          intensity={0.8}\n          castShadow\n          shadow-mapSize-width={1024}\n          shadow-mapSize-height={1024}\n        />\n        <directionalLight\n          position={[-5, 5, 5]}\n          intensity={0.3}\n        />\n        \n        {/* Camera controls */}\n        <OrbitControls\n          enablePan={true}\n          enableZoom={true}\n          enableRotate={true}\n          minDistance={1}\n          maxDistance={15}\n        />\n        \n        {/* 3D Content */}\n        <Center>\n          <Suspense fallback={<LoadingFallback />}>\n            {modelUrl ? (\n              <Model url={modelUrl} onPointClick={onPointClick} showDimensions={showDimensions} />\n            ) : (\n              <FallbackModel onPointClick={onPointClick} showDimensions={showDimensions} />\n            )}\n          </Suspense>\n        </Center>\n        \n        {/* Measurements overlay */}\n        <MeasurementVisualization measurements={measurements} />\n        \n        {/* Error display */}\n        {error && <ErrorFallback error={error} />}\n        \n        {/* Grid helper */}\n        <gridHelper args={[3, 15, '#e2e8f0', '#f1f5f9']} />\n      </Canvas>\n    </div>\n  );\n};\n\nexport type { MeasurementPoint };"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1024, "column": 0}, "map": {"version":3,"sources":["file:///root/3d-measurement-app/packages/3d-tools/src/components/MeasurementTool.tsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport * as THREE from 'three';\nimport { MeasurementType } from '@3d-measurement-app/api-client';\n\ninterface MeasurementToolProps {\n  onMeasurementCreate: (measurement: MeasurementData) => void;\n  disabled?: boolean;\n}\n\nexport interface MeasurementData {\n  type: MeasurementType;\n  label: string;\n  start: THREE.Vector3;\n  end: THREE.Vector3;\n  unit: string;\n}\n\ntype MeasurementMode = 'view' | 'measuring';\n\nexport const MeasurementTool: React.FC<MeasurementToolProps> = ({\n  onMeasurementCreate,\n  disabled = false\n}) => {\n  const [mode, setMode] = useState<MeasurementMode>('view');\n  const [firstPoint, setFirstPoint] = useState<THREE.Vector3 | null>(null);\n  const [measurementType, setMeasurementType] = useState<MeasurementType>('LENGTH');\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [tempMeasurement, setTempMeasurement] = useState<{start: THREE.Vector3, end: THREE.Vector3} | null>(null);\n\n  const handleStartMeasurement = () => {\n    if (disabled) return;\n    setMode('measuring');\n    setFirstPoint(null);\n  };\n\n  const handlePointClick = useCallback((point: THREE.Vector3) => {\n    if (mode !== 'measuring') return;\n\n    if (!firstPoint) {\n      // First point clicked\n      setFirstPoint(point.clone());\n    } else {\n      // Second point clicked - complete measurement\n      setTempMeasurement({\n        start: firstPoint,\n        end: point.clone()\n      });\n      setShowCreateDialog(true);\n      setMode('view');\n      setFirstPoint(null);\n    }\n  }, [mode, firstPoint]);\n\n  const handleCreateMeasurement = (label: string) => {\n    if (!tempMeasurement) return;\n\n    const measurement: MeasurementData = {\n      type: measurementType,\n      label,\n      start: tempMeasurement.start,\n      end: tempMeasurement.end,\n      unit: 'cm'\n    };\n\n    onMeasurementCreate(measurement);\n    setShowCreateDialog(false);\n    setTempMeasurement(null);\n  };\n\n  const handleCancel = () => {\n    setMode('view');\n    setFirstPoint(null);\n    setShowCreateDialog(false);\n    setTempMeasurement(null);\n  };\n\n  const getMeasurementTypeLabel = (type: MeasurementType) => {\n    const labels = {\n      LENGTH: 'Length',\n      WIDTH: 'Width',\n      HEIGHT: 'Height',\n      DIAMETER: 'Diameter',\n      CIRCUMFERENCE: 'Circumference',\n      ANGLE: 'Angle',\n      CUSTOM: 'Custom'\n    };\n    return labels[type] || type;\n  };\n\n  return (\n    <>\n      {/* Measurement Controls */}\n      <div className=\"bg-white border border-gray-200 rounded-lg p-4 space-y-4\">\n        <h3 className=\"font-semibold text-gray-900\">Measurement Tools</h3>\n        \n        {/* Measurement Type Selector */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Measurement Type\n          </label>\n          <select\n            value={measurementType}\n            onChange={(e) => setMeasurementType(e.target.value as MeasurementType)}\n            className=\"w-full border border-gray-300 rounded-md px-3 py-2 text-sm\"\n            disabled={mode === 'measuring'}\n          >\n            <option value=\"LENGTH\">Length</option>\n            <option value=\"WIDTH\">Width</option>\n            <option value=\"HEIGHT\">Height</option>\n            <option value=\"DIAMETER\">Diameter</option>\n            <option value=\"CIRCUMFERENCE\">Circumference</option>\n            <option value=\"ANGLE\">Angle</option>\n            <option value=\"CUSTOM\">Custom</option>\n          </select>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"space-y-2\">\n          {mode === 'view' ? (\n            <button\n              onClick={handleStartMeasurement}\n              disabled={disabled}\n              className=\"w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              Create {getMeasurementTypeLabel(measurementType)}\n            </button>\n          ) : (\n            <div className=\"space-y-2\">\n              <div className=\"text-sm text-blue-600 font-medium\">\n                {firstPoint ? 'Click second point' : 'Click first point'}\n              </div>\n              <button\n                onClick={handleCancel}\n                className=\"w-full bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600\"\n              >\n                Cancel\n              </button>\n            </div>\n          )}\n        </div>\n\n        {/* Instructions */}\n        <div className=\"text-xs text-gray-500\">\n          {mode === 'view' \n            ? 'Select measurement type and click \"Create\" to start measuring'\n            : 'Click two points on the 3D model to create a measurement'\n          }\n        </div>\n      </div>\n\n      {/* Create Measurement Dialog */}\n      {showCreateDialog && tempMeasurement && (\n        <CreateMeasurementDialog\n          measurementType={measurementType}\n          start={tempMeasurement.start}\n          end={tempMeasurement.end}\n          onConfirm={handleCreateMeasurement}\n          onCancel={handleCancel}\n        />\n      )}\n    </>\n  );\n};\n\ninterface CreateMeasurementDialogProps {\n  measurementType: MeasurementType;\n  start: THREE.Vector3;\n  end: THREE.Vector3;\n  onConfirm: (label: string) => void;\n  onCancel: () => void;\n}\n\nconst CreateMeasurementDialog: React.FC<CreateMeasurementDialogProps> = ({\n  measurementType,\n  start,\n  end,\n  onConfirm,\n  onCancel\n}) => {\n  const [label, setLabel] = useState('');\n\n  const distance = start.distanceTo(end);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (label.trim()) {\n      onConfirm(label.trim());\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n        <h3 className=\"text-lg font-semibold mb-4\">Create Measurement</h3>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Type\n            </label>\n            <input\n              type=\"text\"\n              value={measurementType}\n              disabled\n              className=\"w-full border border-gray-300 rounded-md px-3 py-2 bg-gray-50 text-sm\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Label *\n            </label>\n            <input\n              type=\"text\"\n              value={label}\n              onChange={(e) => setLabel(e.target.value)}\n              placeholder=\"Enter measurement label\"\n              className=\"w-full border border-gray-300 rounded-md px-3 py-2 text-sm\"\n              autoFocus\n              required\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              3D Distance\n            </label>\n            <input\n              type=\"text\"\n              value={`${distance.toFixed(3)} units`}\n              disabled\n              className=\"w-full border border-gray-300 rounded-md px-3 py-2 bg-gray-50 text-sm\"\n            />\n          </div>\n\n          <div className=\"bg-gray-50 p-3 rounded text-xs\">\n            <div><strong>Start:</strong> ({start.x.toFixed(3)}, {start.y.toFixed(3)}, {start.z.toFixed(3)})</div>\n            <div><strong>End:</strong> ({end.x.toFixed(3)}, {end.y.toFixed(3)}, {end.z.toFixed(3)})</div>\n          </div>\n\n          <div className=\"flex space-x-3\">\n            <button\n              type=\"button\"\n              onClick={onCancel}\n              className=\"flex-1 border border-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-50\"\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              className=\"flex-1 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700\"\n            >\n              Create\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1474, "column": 0}, "map": {"version":3,"sources":["file:///root/3d-measurement-app/packages/3d-tools/src/hooks/useMeasurementMode.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport * as THREE from 'three';\n\nexport interface MeasurementMode {\n  isActive: boolean;\n  firstPoint: THREE.Vector3 | null;\n  previewPoint: THREE.Vector3 | null;\n}\n\nexport const useMeasurementMode = () => {\n  const [mode, setMode] = useState<MeasurementMode>({\n    isActive: false,\n    firstPoint: null,\n    previewPoint: null\n  });\n\n  const startMeasurement = useCallback(() => {\n    setMode({\n      isActive: true,\n      firstPoint: null,\n      previewPoint: null\n    });\n  }, []);\n\n  const handlePointClick = useCallback((point: THREE.Vector3) => {\n    if (!mode.isActive) return null;\n\n    if (!mode.firstPoint) {\n      // First point clicked\n      setMode(prev => ({\n        ...prev,\n        firstPoint: point.clone()\n      }));\n      return null;\n    } else {\n      // Second point clicked - complete measurement\n      const measurement = {\n        start: mode.firstPoint,\n        end: point.clone()\n      };\n      \n      // Reset mode\n      setMode({\n        isActive: false,\n        firstPoint: null,\n        previewPoint: null\n      });\n      \n      return measurement;\n    }\n  }, [mode]);\n\n  const updatePreview = useCallback((point: THREE.Vector3) => {\n    if (mode.isActive && mode.firstPoint) {\n      setMode(prev => ({\n        ...prev,\n        previewPoint: point.clone()\n      }));\n    }\n  }, [mode.isActive, mode.firstPoint]);\n\n  const cancelMeasurement = useCallback(() => {\n    setMode({\n      isActive: false,\n      firstPoint: null,\n      previewPoint: null\n    });\n  }, []);\n\n  return {\n    mode,\n    startMeasurement,\n    handlePointClick,\n    updatePreview,\n    cancelMeasurement\n  };\n};"],"names":[],"mappings":";;;AAAA;;AASO,MAAM,qBAAqB;IAChC,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAmB;QAChD,UAAU;QACV,YAAY;QACZ,cAAc;IAChB;IAEA,MAAM,mBAAmB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QACnC,QAAQ;YACN,UAAU;YACV,YAAY;YACZ,cAAc;QAChB;IACF,GAAG,EAAE;IAEL,MAAM,mBAAmB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QACpC,IAAI,CAAC,KAAK,QAAQ,EAAE,OAAO;QAE3B,IAAI,CAAC,KAAK,UAAU,EAAE;YACpB,sBAAsB;YACtB,QAAQ,CAAA,OAAQ,CAAC;oBACf,GAAG,IAAI;oBACP,YAAY,MAAM,KAAK;gBACzB,CAAC;YACD,OAAO;QACT,OAAO;YACL,8CAA8C;YAC9C,MAAM,cAAc;gBAClB,OAAO,KAAK,UAAU;gBACtB,KAAK,MAAM,KAAK;YAClB;YAEA,aAAa;YACb,QAAQ;gBACN,UAAU;gBACV,YAAY;gBACZ,cAAc;YAChB;YAEA,OAAO;QACT;IACF,GAAG;QAAC;KAAK;IAET,MAAM,gBAAgB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QACjC,IAAI,KAAK,QAAQ,IAAI,KAAK,UAAU,EAAE;YACpC,QAAQ,CAAA,OAAQ,CAAC;oBACf,GAAG,IAAI;oBACP,cAAc,MAAM,KAAK;gBAC3B,CAAC;QACH;IACF,GAAG;QAAC,KAAK,QAAQ;QAAE,KAAK,UAAU;KAAC;IAEnC,MAAM,oBAAoB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QACpC,QAAQ;YACN,UAAU;YACV,YAAY;YACZ,cAAc;QAChB;IACF,GAAG,EAAE;IAEL,OAAO;QACL;QACA;QACA;QACA;QACA;IACF;AACF","debugId":null}},
    {"offset": {"line": 1550, "column": 0}, "map": {"version":3,"sources":["file:///root/3d-measurement-app/packages/3d-tools/src/utils/coordinates.ts"],"sourcesContent":["import * as THREE from 'three';\n\n/**\n * Convert 3D coordinates to the standardized coordinate system\n * used by the backend (Y-up, Z-forward, normalized unit cube)\n */\nexport const toStandardCoordinates = (point: THREE.Vector3): {\n  x: number;\n  y: number;\n  z: number;\n} => {\n  return {\n    x: point.x,\n    y: point.y,\n    z: point.z\n  };\n};\n\n/**\n * Convert from standardized coordinates to Three.js Vector3\n */\nexport const fromStandardCoordinates = (coords: {\n  x: number;\n  y: number;\n  z: number;\n}): THREE.Vector3 => {\n  return new THREE.Vector3(coords.x, coords.y, coords.z);\n};\n\n/**\n * Calculate real-world distance from 3D points\n * Assumes the model is normalized to a unit cube\n */\nexport const calculateDistance = (\n  start: THREE.Vector3,\n  end: THREE.Vector3,\n  scaleFactor: number = 100 // Default: 100cm for unit cube\n): number => {\n  const distance3D = start.distanceTo(end);\n  return distance3D * scaleFactor;\n};\n\n/**\n * Validate that coordinates are within the normalized bounds\n */\nexport const validateCoordinates = (point: THREE.Vector3): boolean => {\n  const bounds = 0.5; // [-0.5, 0.5] unit cube\n  return (\n    Math.abs(point.x) <= bounds &&\n    Math.abs(point.y) <= bounds &&\n    Math.abs(point.z) <= bounds\n  );\n};\n\n/**\n * Snap point to the nearest surface or grid intersection\n */\nexport const snapToSurface = (\n  point: THREE.Vector3,\n  snapDistance: number = 0.05\n): THREE.Vector3 => {\n  const snapped = point.clone();\n  \n  // Snap to grid intervals\n  const gridSize = 0.1;\n  snapped.x = Math.round(snapped.x / gridSize) * gridSize;\n  snapped.y = Math.round(snapped.y / gridSize) * gridSize;\n  snapped.z = Math.round(snapped.z / gridSize) * gridSize;\n  \n  return snapped;\n};\n\n/**\n * Format coordinates for display\n */\nexport const formatCoordinates = (point: THREE.Vector3, precision: number = 3): string => {\n  return `(${point.x.toFixed(precision)}, ${point.y.toFixed(precision)}, ${point.z.toFixed(precision)})`;\n};\n\n/**\n * Calculate the center point between two coordinates\n */\nexport const getCenterPoint = (start: THREE.Vector3, end: THREE.Vector3): THREE.Vector3 => {\n  return new THREE.Vector3(\n    (start.x + end.x) / 2,\n    (start.y + end.y) / 2,\n    (start.z + end.z) / 2\n  );\n};"],"names":[],"mappings":";;;;;;;;;AAAA;;AAMO,MAAM,wBAAwB,CAAC;IAKpC,OAAO;QACL,GAAG,MAAM,CAAC;QACV,GAAG,MAAM,CAAC;QACV,GAAG,MAAM,CAAC;IACZ;AACF;AAKO,MAAM,0BAA0B,CAAC;IAKtC,OAAO,IAAI,+IAAA,CAAA,UAAa,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,EAAE,OAAO,CAAC;AACvD;AAMO,MAAM,oBAAoB,CAC/B,OACA,KACA,cAAsB,IAAI,+BAA+B;AAAhC;IAEzB,MAAM,aAAa,MAAM,UAAU,CAAC;IACpC,OAAO,aAAa;AACtB;AAKO,MAAM,sBAAsB,CAAC;IAClC,MAAM,SAAS,KAAK,wBAAwB;IAC5C,OACE,KAAK,GAAG,CAAC,MAAM,CAAC,KAAK,UACrB,KAAK,GAAG,CAAC,MAAM,CAAC,KAAK,UACrB,KAAK,GAAG,CAAC,MAAM,CAAC,KAAK;AAEzB;AAKO,MAAM,gBAAgB,CAC3B,OACA,eAAuB,IAAI;IAE3B,MAAM,UAAU,MAAM,KAAK;IAE3B,yBAAyB;IACzB,MAAM,WAAW;IACjB,QAAQ,CAAC,GAAG,KAAK,KAAK,CAAC,QAAQ,CAAC,GAAG,YAAY;IAC/C,QAAQ,CAAC,GAAG,KAAK,KAAK,CAAC,QAAQ,CAAC,GAAG,YAAY;IAC/C,QAAQ,CAAC,GAAG,KAAK,KAAK,CAAC,QAAQ,CAAC,GAAG,YAAY;IAE/C,OAAO;AACT;AAKO,MAAM,oBAAoB,CAAC,OAAsB,YAAoB,CAAC;IAC3E,OAAO,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;AACxG;AAKO,MAAM,iBAAiB,CAAC,OAAsB;IACnD,OAAO,IAAI,+IAAA,CAAA,UAAa,CACtB,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,GACpB,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,GACpB,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI;AAExB","debugId":null}},
    {"offset": {"line": 1601, "column": 0}, "map": {"version":3,"sources":["file:///root/3d-measurement-app/packages/3d-tools/src/index.ts"],"sourcesContent":["// Export components\nexport { ModelViewer } from './components/ModelViewer';\nexport { MeasurementTool } from './components/MeasurementTool';\n\n// Export hooks\nexport { useMeasurementMode } from './hooks/useMeasurementMode';\n\n// Export utilities\nexport * from './utils/coordinates';\n\n// Export types\nexport type { MeasurementPoint } from './components/ModelViewer';\nexport type { MeasurementData } from './components/MeasurementTool';"],"names":[],"mappings":"AAAA,oBAAoB;;AACpB;AACA;AAEA,eAAe;AACf;AAEA,mBAAmB;AACnB","debugId":null}},
    {"offset": {"line": 1631, "column": 0}, "map": {"version":3,"sources":["file:///root/3d-measurement-app/company-dashboard/src/app/company/%5Bsubdomain%5D/orders/%5Bid%5D/page.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useRouter } from 'next/navigation';\nimport { Card, CardHeader, CardTitle, CardContent, Button, LoadingSpinner } from '@3d-measurement-app/ui';\nimport { ordersAPI, measurementsAPI, Order, Measurement, MeasurementType } from '@3d-measurement-app/api-client';\nimport { ModelViewer, MeasurementTool, MeasurementData, MeasurementPoint, toStandardCoordinates } from '@3d-measurement-app/3d-tools';\nimport * as THREE from 'three';\n\nexport default function OrderDetailPage() {\n  const params = useParams();\n  const router = useRouter();\n  const subdomain = params.subdomain as string;\n  const orderId = params.id as string;\n  \n  const [order, setOrder] = useState<Order | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [creating, setCreating] = useState(false);\n\n  useEffect(() => {\n    loadOrder();\n  }, [subdomain, orderId]);\n\n  const loadOrder = async () => {\n    try {\n      setError('');\n      const response = await ordersAPI.get(subdomain, orderId);\n      setOrder(response.order);\n    } catch (err: any) {\n      setError(err.error || 'Failed to load order');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateMeasurement = async (measurementData: MeasurementData) => {\n    if (!order) return;\n\n    setCreating(true);\n    try {\n      const startCoords = toStandardCoordinates(measurementData.start);\n      const endCoords = toStandardCoordinates(measurementData.end);\n\n      await measurementsAPI.create(subdomain, orderId, {\n        type: measurementData.type,\n        label: measurementData.label,\n        startPointX: startCoords.x,\n        startPointY: startCoords.y,\n        startPointZ: startCoords.z,\n        endPointX: endCoords.x,\n        endPointY: endCoords.y,\n        endPointZ: endCoords.z,\n        unit: measurementData.unit\n      });\n\n      // Reload order to get updated measurements\n      await loadOrder();\n    } catch (err: any) {\n      setError(err.error || 'Failed to create measurement');\n    } finally {\n      setCreating(false);\n    }\n  };\n\n  const handlePointClick = (point: THREE.Vector3) => {\n    console.log('Point clicked:', point);\n    // This will be handled by the MeasurementTool component\n  };\n\n  const convertMeasurementsToPoints = (measurements: Measurement[]): MeasurementPoint[] => {\n    return measurements.map(m => ({\n      id: m.id,\n      start: new THREE.Vector3(m.startPointX, m.startPointY, m.startPointZ),\n      end: new THREE.Vector3(m.endPointX, m.endPointY, m.endPointZ),\n      label: m.label,\n      value: m.value || undefined,\n      unit: m.unit\n    }));\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusStyles = {\n      SUBMITTED: 'bg-blue-100 text-blue-800',\n      PROCESSING: 'bg-yellow-100 text-yellow-800',\n      MODELING_FAILED: 'bg-red-100 text-red-800',\n      READY_FOR_MEASUREMENT: 'bg-purple-100 text-purple-800',\n      MEASUREMENTS_DRAWN: 'bg-indigo-100 text-indigo-800',\n      CLIENT_INPUT_NEEDED: 'bg-orange-100 text-orange-800',\n      COMPLETED: 'bg-green-100 text-green-800',\n      CANCELLED: 'bg-gray-100 text-gray-800',\n    };\n\n    return (\n      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n        statusStyles[status as keyof typeof statusStyles] || 'bg-gray-100 text-gray-800'\n      }`}>\n        {status.replace(/_/g, ' ')}\n      </span>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  if (error && !order) {\n    return (\n      <Card>\n        <CardContent>\n          <div className=\"text-center py-12\">\n            <p className=\"text-red-600 mb-4\">{error}</p>\n            <Button onClick={() => router.back()}>\n              Go Back\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!order) {\n    return (\n      <Card>\n        <CardContent>\n          <div className=\"text-center py-12\">\n            <p className=\"text-gray-500\">Order not found</p>\n            <Button onClick={() => router.back()} className=\"mt-4\">\n              Go Back\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const measurementPoints = convertMeasurementsToPoints(order.measurements || []);\n  const modelUrl = order.model3dUrl; // Don't use fallback URL that doesn't exist\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-start\">\n        <div>\n          <div className=\"flex items-center space-x-3 mb-2\">\n            <h1 className=\"text-2xl font-bold text-gray-900\">{order.orderNumber}</h1>\n            {getStatusBadge(order.status)}\n          </div>\n          <p className=\"text-gray-600\">\n            Client: {order.client?.name || order.client?.email}\n          </p>\n          {order.notes && (\n            <p className=\"text-sm text-gray-500 mt-1\">{order.notes}</p>\n          )}\n        </div>\n        \n        <Button \n          variant=\"secondary\" \n          onClick={() => router.push(`/company/${subdomain}/orders`)}\n        >\n          Back to Orders\n        </Button>\n      </div>\n\n      {error && (\n        <div className=\"bg-red-50 border border-red-200 rounded-md p-4\">\n          <p className=\"text-red-800\">{error}</p>\n        </div>\n      )}\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* 3D Viewer */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle>3D Model Viewer</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ModelViewer\n                modelUrl={modelUrl}\n                onPointClick={handlePointClick}\n                measurements={measurementPoints}\n                className=\"h-96\"\n              />\n              \n              {!order.model3dUrl && (\n                <div className=\"mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-md\">\n                  <p className=\"text-yellow-800 text-sm\">\n                    <strong>Note:</strong> No 3D model available. The 3D model will be generated from uploaded photos. The green cube above is a placeholder for demonstration.\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Measurement Tools */}\n        <div className=\"space-y-6\">\n          <Card>\n            <CardContent>\n              <MeasurementTool\n                onMeasurementCreate={handleCreateMeasurement}\n                disabled={creating}\n              />\n            </CardContent>\n          </Card>\n\n          {/* Order Info */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Order Details</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div>\n                <span className=\"text-sm font-medium text-gray-700\">Priority:</span>\n                <span className=\"ml-2 text-sm text-gray-900\">{order.priority}</span>\n              </div>\n              \n              <div>\n                <span className=\"text-sm font-medium text-gray-700\">Created:</span>\n                <span className=\"ml-2 text-sm text-gray-900\">\n                  {new Date(order.createdAt).toLocaleDateString()}\n                </span>\n              </div>\n              \n              {order.dueDate && (\n                <div>\n                  <span className=\"text-sm font-medium text-gray-700\">Due Date:</span>\n                  <span className=\"ml-2 text-sm text-gray-900\">\n                    {new Date(order.dueDate).toLocaleDateString()}\n                  </span>\n                </div>\n              )}\n              \n              <div>\n                <span className=\"text-sm font-medium text-gray-700\">Measurements:</span>\n                <span className=\"ml-2 text-sm text-gray-900\">\n                  {order.measurements?.length || 0}\n                </span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Measurements List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Measurements</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {order.measurements && order.measurements.length > 0 ? (\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Label\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Type\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Start Point\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      End Point\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Client Value\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Status\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {order.measurements.map((measurement) => (\n                    <tr key={measurement.id} className=\"hover:bg-gray-50\">\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                        {measurement.label}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {measurement.type}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 font-mono\">\n                        ({measurement.startPointX.toFixed(3)}, {measurement.startPointY.toFixed(3)}, {measurement.startPointZ.toFixed(3)})\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 font-mono\">\n                        ({measurement.endPointX.toFixed(3)}, {measurement.endPointY.toFixed(3)}, {measurement.endPointZ.toFixed(3)})\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {measurement.value ? `${measurement.value} ${measurement.unit}` : '-'}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                          measurement.verified \n                            ? 'bg-green-100 text-green-800' \n                            : 'bg-yellow-100 text-yellow-800'\n                        }`}>\n                          {measurement.verified ? 'Verified' : 'Pending'}\n                        </span>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <p className=\"text-gray-500\">No measurements created yet</p>\n              <p className=\"text-sm text-gray-400 mt-1\">\n                Use the measurement tools to add measurements to this order\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}